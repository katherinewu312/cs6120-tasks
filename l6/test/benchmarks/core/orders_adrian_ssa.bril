@gcd(a: int, b: int): int {
  is_term: bool = undef;
  zero: int = undef;
  mod: int = undef;
  
  set a.entry1 a;
  set b.entry1 b;
  set mod.entry1 mod;
  set zero.entry1 zero;
  set is_term.entry1 is_term;

.entry1:
  is_term.entry1: bool = get;
  zero.entry1: int = get;
  mod.entry1: int = get;
  b.entry1: int = get;
  a.entry1: int = get;
  
  set a.while.cond a.entry1;
  set b.while.cond b.entry1;
  set mod.while.cond mod.entry1;
  set zero.while.cond zero.entry1;
  set is_term.while.cond is_term.entry1;
  
  jmp .while.cond;

.while.cond:
  is_term.while.cond: bool = get;
  zero.while.cond: int = get;
  mod.while.cond: int = get;
  b.while.cond: int = get;
  a.while.cond: int = get;
  
  mod.while.cond.1: int = call @mod a.while.cond b.while.cond;
  zero.while.cond.1: int = const 0;
  is_term.while.cond.1: bool = eq mod.while.cond.1 zero.while.cond.1;
  
  set a.while.finish a.while.cond;
  set b.while.finish b.while.cond;
  set mod.while.finish mod.while.cond.1;
  set zero.while.finish zero.while.cond.1;
  set is_term.while.finish is_term.while.cond.1;
  set a.while.body a.while.cond;
  set b.while.body b.while.cond;
  set mod.while.body mod.while.cond.1;
  set zero.while.body zero.while.cond.1;
  set is_term.while.body is_term.while.cond.1;
  
  br is_term.while.cond.1 .while.finish .while.body;

.while.body:
  is_term.while.body: bool = get;
  zero.while.body: int = get;
  mod.while.body: int = get;
  b.while.body: int = get;
  a.while.body: int = get;
  
  a.while.body.1: int = id b.while.body;
  b.while.body.1: int = id mod.while.body;
  
  set a.while.cond a.while.body.1;
  set b.while.cond b.while.body.1;
  set mod.while.cond mod.while.body;
  set zero.while.cond zero.while.body;
  set is_term.while.cond is_term.while.body;
  
  jmp .while.cond;

.while.finish:
  is_term.while.finish: bool = get;
  zero.while.finish: int = get;
  mod.while.finish: int = get;
  b.while.finish: int = get;
  a.while.finish: int = get;

  ret b.while.finish;
}